# My Method
# 5776 ms & 16.2 MB
class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:
        temp = []
        res = []
        for num in nums:
            if num in temp:
                res.append(num)
                break
            else:
                temp.append(num)
                
        n = len(nums)
        nums_right = {x for x in range(1,n+1)}
        nums_error = set(nums)
        missing = nums_right.difference(nums_error)
        res.append(missing.pop())
        return res

# Better Method
# Runtime: 208 ms, faster than 81.46% of Python3 online submissions for Set Mismatch.
# Memory Usage: 15.5 MB, less than 34.78% of Python3 online submissions for Set Mismatch.
# Using sum of set
class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:
        return [sum(nums) - sum(set(nums)), sum(range(1, len(nums)+1)) - sum(set(nums))]
