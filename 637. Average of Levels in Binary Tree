# DFS Method 1
class Solution:
    def averageOfLevels(self, root: TreeNode) -> List[float]:
        res = []
        self.getlevel(root, 0, res)
        return [sum(line)/len(line) for line in res]
        
    def getlevel(self, root, level, res):
        if not root:
            return
        if level >= len(res):
            res.append([])
        res[level].append(root.val)
        self.getlevel(root.right, level+1, res)
        self.getlevel(root.left, level+1, res)
        
# DFS Method 2
class Solution(object):
    def averageOfLevels(self, root):
        """
        :type root: TreeNode
        :rtype: List[float]
        """
        info = [] # the first element is sum of the level,the second element is nodes in this level
        def dfs(node, depth=0):
            if not node:
                return
            if len(info) <= depth:
                info.append([0, 0])
            info[depth][0] += node.val
            info[depth][1] += 1
            # print(info)
            dfs(node.left, depth + 1)
            dfs(node.right, depth + 1)
        dfs(root)
        return [s / float(c) for s,c in info]
  
 # BFS Method
 class Solution:
    def averageOfLevels(self, root):
        """
        :type root: TreeNode
        :rtype: List[float]
        """
        if not root:
            return []
        queue=[root]
        result=[]
        while queue:
            layer_len=len(queue)
            temp=[]
            for i in range(layer_len):
                cur_node=queue[0]
                temp.append(cur_node.val)
                if cur_node.left!=None:
                    queue.append(cur_node.left)
                if cur_node.right!=None:
                    queue.append(cur_node.right)
                queue.pop(0)
            result.append(sum(temp)/layer_len)
        return resul
