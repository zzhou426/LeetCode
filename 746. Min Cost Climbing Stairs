# Method 1
# Runtime: 56 ms, faster than 88.64% of Python3 online submissions for Min Cost Climbing Stairs.
# Memory Usage: 14.2 MB, less than 8.81% of Python3 online submissions for Min Cost Climbing Stairs.

class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        (if len(cost) <= 2:
            return min(cost))
        
        dp = [0]*(len(cost)+1)
        for i in range(2, len(dp)):
            dp[i] = min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2])
        return dp[-1]
        
 # Method 2
      costed = [0, 0]
        for i in xrange(2, len(cost)):
            costed.append(min(costed[i - 1] + cost[i - 1], costed[i - 2] + cost[i - 2]))
        return min(costed[-1] + cost[-1], costed[-2] + cost[-2])
